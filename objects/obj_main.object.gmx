<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_main</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//Global variables
global.money = 100;
global.currentbet = 10;
global.defaultbet = 10;
global.minbet = 1;
global.pot = 0;
global.gameon = false;
global.makeobj = false;
global.playerdealnewcard = 0;
global.dealerdealnewcard = 0;
global.hit = false;
global.stand = false;
global.gameover = false;
global.insurance = false;
global.noinsurance = false;
global.double = false;

global.drawcardsdealer = ds_list_create();
global.drawcardsplayer = ds_list_create();

why = 'null';
nextcard = 0;
playeronhand = 0;
dealeronhand = 0;
playerhandvalue = 0;
dealerhandvalue = 0;
playercards = ds_list_create();
dealercards = ds_list_create();
dealercardsvalue = ds_list_create();
playercardsuit = ds_list_create();
dealercardsuit = ds_list_create();
drawplayercards = ds_list_create();
drawdealercards = ds_list_create();
flipped = false;
insure = false;
insoption = true;
drawquestion = false;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New game and bet buttons

//grid width and height
width = 2;
height = 2;
//starting position of the grid
xx = 35
yy = 440
var newgame = instance_create(480, 515,obj_newgamebutton);
//counter for the subimg and change bet ammount
count = 0;
//nested for loop to create the button grid
for(i = 0; i &lt; height; i += 1)
{
    for(j = 0; j &lt; width; j += 1)
    {
        var inst = instance_create(xx,yy,obj_betbutton);
        //set some variables in the new instance
        with(inst)
        {
            subimg = other.count;
            changebet = other.count;
        }
        count += 1;
        //move the grid to the right by one button
        xx += 60;
    }
    //reset the x position, move the grid up one
    xx = 35;
    yy += 60;    
}

var inst = instance_create(155,500 ,obj_betbutton);
        //set some variables in the new instance
with(inst)
{
    subimg = 4;
    changebet = 4;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///making the deck and shuffling
deck = ds_list_create();
for(k = 0; k &lt; 52; k += 1)
{
    ds_list_add(deck, k);
}
randomize();
ds_list_shuffle(deck);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset with R delete later

if(keyboard_check_pressed(ord('R')))
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit or Stand    
//check if hit button has been pressed, and add only 1 card
if (global.hit) {
    global.playerdealnewcard += 1;
    if (insure) {
        with(obj_insurance) {
            instance_destroy();
            insure = false;
            global.insurance = false;
        }
    }
    global.hit = false;
    with(obj_doublebutton) {
        instance_destroy();
    }
}

if (global.stand) {
    if (insure) {
        with(obj_insurance) {
            instance_destroy();
        }
        insure = false;
        global.insurance = false;
    }
    with(obj_doublebutton) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add new cards for the player
while (playeronhand &lt; global.playerdealnewcard) {
    scr_animatecard('player');
    //assign the temp variable card the value of the next card in the deck
    var card = 0;
    card = ds_list_find_value(deck, nextcard);
    ds_list_add(drawplayercards, card);
    ds_list_add(playercardsuit, scr_getsuit(card));
    ds_list_add(playercards, scr_getvalue(card));

    //increment the next card in the deck and # of card in the players hand
    nextcard += 1;
    playeronhand += 1;
    //calculate the total score of the player hand unless the player has split
    playerhandvalue = scr_gettotal(playercards);
    //double
    if (global.double &amp;&amp; playeronhand == 3) {
        global.stand = true;
        global.double = false;
    }

    //check win conditions

    if(playerhandvalue == 21 &amp;&amp; playeronhand == 2)
    {  
        scr_endgame('blackjack');
        why = 'Blackjack!';
    }
    else if(playerhandvalue == 21)
    {
        global.stand = true;
    }
    if (playeronhand == 5 &amp;&amp; playerhandvalue &lt;= 21) {
        scr_endgame('win');
        why = 'Win! 5 cards without bust';
    }
    if (playerhandvalue &gt; 21) {
        scr_endgame('lose');
        why = 'busted!';
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add new cards for the dealer
if (global.gameon) {
    //make sure we flip the dealers second card when appropriate
    if (flipped &amp;&amp; dealeronhand &gt;= 2) {
        ds_list_replace(dealercardsuit, 1, tempsuit);
        ds_list_replace(dealercards, 1, tempcard);
    }


    //count cards on hand, to deal a new one +1 dealerdealnewcard
    while (dealeronhand &lt; global.dealerdealnewcard) {
        //add one card to the dealers hand
        scr_animatecard('dealer');
        dealeronhand += 1;
        //assign the temp variable card the value of the next card in the deck
        var card = 0;
        card = ds_list_find_value(deck, nextcard);
        ds_list_add(drawdealercards, card);
        nextcard += 1;
        //Handle the face down card (dealers second card)
        if (dealeronhand == 2) {
            tempsuit = scr_getsuit(card);
            tempcard = scr_getvalue(card);
            ds_list_add(dealercardsuit, ' ');
            ds_list_add(dealercards, 'Flipped');
        } else {
            ds_list_add(dealercardsuit, scr_getsuit(card));
            ds_list_add(dealercards, scr_getvalue(card));
        }
        //store all of the dealers cards and the total score of the hand
        ds_list_add(dealercardsvalue, scr_getvalue(card));
        dealerhandvalue = scr_gettotal(dealercardsvalue);

        //if the first dealer card is an ace and there is enough money for insurance, offer insurance 
        if (global.money &gt; (global.pot / 2)) {
            if (is_string(ds_list_find_value(dealercardsvalue, 0)) &amp;&amp; insoption &amp;&amp; dealeronhand == 2 &amp;&amp; playerhandvalue != 21) {
                if (ds_list_find_value(dealercardsvalue, 0) == 'A') {
                    global.makeobj = false;
                    instance_create(435, 515, obj_insurance);
                    instance_create(525, 515, obj_noinsurance);
                    with(obj_hitbutton) {
                        instance_destroy();
                    }
                    with(obj_standbutton) {
                            instance_destroy();
                        }
                        drawquestion = true;
                }
                insoption = false;
            }
        } else {
            //TODO: add a tooltip letting the player know he didn't have enough money for insurance
        }
        //check for dealer blackjack only if the second card is flipped
        if (dealerhandvalue == 21 &amp;&amp; flipped &amp;&amp; dealeronhand == 2) {
            if (playerhandvalue == 21) {
                scr_endgame('push');
                why = 'Push! bet returned';
            } else {
                scr_endgame('lose');
                why = 'Dealer blackjack!';
            }
        }
        //check for dealer bust
        if (dealerhandvalue &gt; 21) {
            scr_endgame('win');
            why = 'Dealer busted!';
        }
    }
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle objects
if (global.gameon) {
    instance_deactivate_object(obj_betbutton);
    instance_deactivate_object(obj_newgamebutton);
    //only make the objects once
    if (global.makeobj &amp;&amp; dealeronhand == 2 &amp;&amp; playerhandvalue != 21) {
        var hit = instance_create(390, 515, obj_hitbutton)
        var stand = instance_create(480, 515, obj_standbutton)
        if (global.money &gt;= (global.pot)) {
            var double = instance_create(570, 515, obj_doublebutton)
        }
        else {
            //TODO add some tooltip letting the player know he doesnt have money for double
        }
        global.makeobj = false;
    }
}

if (!global.gameon) {
    why = 'null';
    if (nextcard &gt; 42) {
        randomize();
        ds_list_shuffle(deck);
        nextcard = 0;
    }
    instance_activate_object(obj_betbutton);
    instance_activate_object(obj_newgamebutton);
    scr_killplaybuttons();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// win or lose  
if (dealeronhand &gt; 2 || global.stand) {
    flipped = true;
}
//dealer hits if under 16 otherwise stands
if (global.stand &amp;&amp; dealerhandvalue &lt;= 16) {
    global.dealerdealnewcard += 1;
}
//win or lose conditions if the game comes down to a showdown
if (global.stand &amp;&amp; dealerhandvalue &gt;= 17 &amp;&amp; dealerhandvalue &lt;= 21) {
    if(dealerhandvalue == 21 &amp;&amp; dealeronhand == 2){
        scr_endgame('lose');
        why = 'Dealer Blackjack!'   
    } else if (playerhandvalue == dealerhandvalue) {
        scr_endgame('push');
        why = 'Push! bet returned'
    } else if (dealerhandvalue &gt; playerhandvalue) {
        scr_endgame('lose');
        why = 'You lose, Sorry!';
    } else if (playerhandvalue &gt; dealerhandvalue) {
        scr_endgame('win');
        why = 'You win!';
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Insurance
//tooltip idea? 
//insurance costs pot/2 cost taken from global.money if there is not enough money don't offer insurance
if (global.insurance) {
    if (dealerhandvalue == 21) {
        global.makeobj = false;
        scr_endgame('win');
        why = 'Dealer had 21, insurance paid off';
    } else {
        global.makeobj = true;
    }
    global.insurance = false;
    with(obj_insurance) {
        instance_destroy();
    }
    with(obj_noinsurance) {
        instance_destroy();
    }
}
if (global.noinsurance) {
    if (dealerhandvalue == 21) {
        global.makeobj = false;
        if (playerhandvalue == 21) {
            scr_endgame('push');
            why = 'Push! bet returned';
        } else {
            scr_endgame('lose');
            why = 'Dealer blackjack!, You lose, Sorry!';
        }
    }
    global.noinsurance = false;
    with(obj_insurance) {
        instance_destroy();
    }
    with(obj_noinsurance) {
        instance_destroy();
    }
    if (dealerhandvalue != 21) {
        global.makeobj = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double
if (global.double) {
        global.playerdealnewcard += 1;
        global.money -= global.pot;
        global.pot = global.pot * 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Text
draw_set_font(fnt_arial12);
xx = room_width / 2;
yy = room_height / 2;


draw_set_colour(c_white);



if (global.gameon) {
    if (!flipped) {
        var tempscore = ds_list_create();
        ds_list_add(tempscore, ds_list_find_value(dealercards, 0));
        draw_set_halign(fa_left);
    draw_set_valign(fa_top);
        draw_text(xx - 100, yy + 90,string(playerhandvalue));
        draw_text(xx - 100, yy - 190, string(scr_gettotal(tempscore)));
    } else {
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(xx - 100,yy + 90, string(playerhandvalue));
        draw_text(xx - 100, yy - 190, string(dealerhandvalue));
    }

}


if (why != 'null') {
    if (global.gameover) {
        draw_sprite(spr_infobox, 0, 480, 451);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(480, 450, 'Game Over, You ran out of money!');
    } else {
        draw_sprite(spr_infobox, 0, 480, 451);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(480, 450, string(why));
    }
}

if(drawquestion)
{
        draw_sprite(spr_infobox, 0, 480, 451);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(480,450,'Dealer has Ace, buy insurance ?');
}

/*
var o = 0;
var yyo = 100;
var yyn = 100;
var n = 0;
var yy = 100;
var yyp = 100;
var xx = 500;
var i = 0;
var j = 0;
var f = 0;

// Display the card value and suit of the dealer and player, remove after adding card sprites

if (global.gameon) {

    draw_text(x - 70, y + 290, string('playercards'))
    repeat(ds_list_size(playercards)) {
        if (!ds_list_empty(playercards)) {
            draw_text(x - 70, yyp + 270, string(ds_list_find_value(playercards, f)));
            draw_text(x - 50, yyp + 270, string(ds_list_find_value(playercardsuit, f)));
        }
        yyp += 15;
        f += 1;
    }
    draw_text(x + 50, y + 290, string('dealercards'))
    repeat(ds_list_size(dealercards)) {
        if (!ds_list_empty(dealercards)) {
            draw_text(x + 50, yy + 270, string(ds_list_find_value(dealercards, j)));
            draw_text(x + 70, yy + 270, string(ds_list_find_value(dealercardsuit, j)));
        }
        yy += 15;
        j += 1;
    }
}

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cards

cardsscale = 0.5;
rot = 0;
cardsx = (room_width / 2);
cardsy = room_height;

cardsy -= 168;
cardsx -= 20;
for(i = 0; i &lt; playeronhand; i+=1)
{   
    if(ds_list_find_value(global.drawcardsplayer, i))
    {
        draw_sprite_ext(spr_cards, ds_list_find_value(drawplayercards, i), cardsx, cardsy, cardsscale, cardsscale,0,c_white,1);
        cardsx += 18;
    }
}
cardsx = (room_width / 2);
cardsy = room_height;
cardsy -= 450;
cardsx -= 20;

    for(i = 0; i &lt; dealeronhand; i += 1) {   
        if(!flipped &amp;&amp; i == 1) {
            if(ds_list_find_value(global.drawcardsdealer, i))
            {
                draw_sprite_ext(spr_cards, 52/*cardback sprite is #52*/, cardsx, cardsy, cardsscale, cardsscale ,0,c_white,1);
                cardsx += 18;
            }
        } else {
            if(ds_list_find_value(global.drawcardsdealer, i))
            {
                draw_sprite_ext(spr_cards, ds_list_find_value(drawdealercards, i), cardsx, cardsy, cardsscale, cardsscale,0,c_white,1);
                cardsx += 18;
            }
        }
        
    }

cardsx = (room_width / 2);
cardsy = room_height;

cardsy -= 450;
cardsx += 380; 

//decorative deck
for(i = 0; i &lt; 4; i +=1) {
    draw_sprite_ext(spr_cards, 52/*cardback sprite is #52*/, cardsx, cardsy, cardsscale, cardsscale ,0,c_white,1);
    cardsx -= 7;
    cardsy += 5;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
